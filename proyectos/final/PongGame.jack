/**
 * Represents a shooting game.
 * Made by Pedro Quintero, Miguel Restrepo & Tomas Navarro.
 * For the Computer Architecture Class at Universidad EAFIT
 * Professor Jose Luis Montoya.
 */
class PongGame {

    static PongGame instance; // the singelton, a Pong game instance     
    field Bat bat;            // the bat
    field Target target;
    field Ball laser;
    field int wall;           // the current wall that the ball is bouncing off of.
    field boolean exit;       // true when the game is over
    field int score;          // the current score.
    field int lastWall;       // the last wall that the ball bounced off of.
    field boolean shot;
    field int level;

    // The current width of the bat
    field int batWidth;
    field int targetXLim;

    /** Constructs a new Pong game. */
    constructor PongGame new() {
	    do Screen.clearScreen();
        let batWidth = 50;  // initial bat size
        let bat = Bat.new(230, 229, batWidth, 7);
        let target = Target.new(230,120,5,1,1,510);
        let targetXLim = 511-batWidth;
        let shot = false;
        let level = 1;
        do Screen.drawRectangle(0, 238, 511, 240);
	    do Output.moveCursor(22,0);
	    do Output.printString("Score: 0");
	
	    let exit = false;
	    let score = 0;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do bat.dispose();
	    do target.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of Pong game, and stores it. */
    function void newInstance() {
        let instance = PongGame.new();
        return;
    }
    
    /** Returns the single instance of this Pong game. */
    function PongGame getInstance() {
        return instance;
    }

    /** Starts the game, and andles inputs from the user that control
     *  the bat's movement direction. */
    method void run() {
        var char key;

        while (~exit) {
            // waits for a key to be pressed.
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                do bat.move();
                do moveTarget();
                if(shot){
                    do laser.move();
                    if(laser.getY()=0){
                        let shot = false;
                        do laser.dispose();
                    }
                }
                do Sys.wait(50);
            }

            if (key = 130) { do bat.setDirection(1); }
	        else {
	            if (key = 132) { do bat.setDirection(2); }
		        else {
                    if (key = 81) { let exit = true; }
                    else{
                        if(key = 131) {
                            if(~shot){
                                let shot = true;
                                let laser =Ball.new(bat.getMiddle(), bat.getCannonTop()); 
                            }
                        }
                    }
		        }
            }

            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do bat.move();
                if(shot){
                    do laser.move();
                    if(laser.getY()=0){
                        let shot = false;
                        do laser.dispose();
                    }
                }
                do moveTarget();
                do Sys.wait(50);
            }
        }

	    if (exit) {
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
	    }
            
        return;
    }

    /**
     * Handles ball movement, including bouncing.
     * If the ball bounces off a wall, finds its new direction.
     * If the ball bounces off the bat, increases the score by one
    **/

    method void moveTarget(){

        var int tY,tX,twidth,tHeight;
        do target.move();
        let tY = target.getY();
        let tX = target.getX();
        let twidth = target.getWidth();
        let tHeight = target.getYHeight();
        if(shot){
            if(laser.checkColition(tX,tY,twidth,tHeight)){
               let level = level+1;
               let score = score+1;
               do laser.hide();
               do laser.dispose();
               do target.hide();
               do target.dispose();
               let shot = false;
               let target = Target.new(250,tY-6,2*level,-1,0,511);
               do Output.moveCursor(22,7);
               do Output.printInt(score);
            }

        }

        if(tX = 0){ do target.setDirection(1);}
        if(tX = targetXLim){ do target.setDirection(-1);}
        return;
    }
}